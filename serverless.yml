service:
  name: auction-app

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  tags:
    Owner: serverless_node_aws_user
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
  iamRoleStatements:
    - ${file(iam/LambdaRoles.yml):AuctionsTablePutItem}
    - ${file(iam/SQS-Role.yml):SendMessage}

resources:
  Resources: # CloudFormation syntax
    AuctionsTable: ${file(resources/DynamoDB.yml):AuctionsTable}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /get-auctions
          authorizer: ${self:custom.authorizer}

  getAuctionById:
    handler: src/handlers/getAuctionById.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
          authorizer: ${self:custom.authorizer}

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
          authorizer: ${self:custom.authorizer}

  processAuctions:
    handler: src/handlers/processAuctions.handler
#    events:
#      - schedule: rate(1 minute)

custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:serverless-auth0-authorizer-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable # CloudFormation syntax, returns Table Name
    arn: !GetAtt AuctionsTable.Arn # CloudFormation syntax, returns Table ARN
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
